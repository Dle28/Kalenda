<testsuite name="Mocha Tests" tests="59" failures="0" errors="2" skipped="0" timestamp="Sat, 18 Oct 2025 15:17:55 GMT" time="2.41">
<testcase classname="Auction safety fix (superseded by refund queue) TDD" name="BidBook struct does NOT contain pending_refund fields" file="/root/MICA-E.Dapp/tests/auction-safety-fix.test.ts" time="0.003"/>
<testcase classname="Auction safety fix (superseded by refund queue) TDD" name="bid_place enqueues outbid refunds to RefundQueue and does not have the old guard" file="/root/MICA-E.Dapp/tests/auction-safety-fix.test.ts" time="0.001"/>
<testcase classname="Auction safety fix (superseded by refund queue) TDD" name="BidOutbidRefund consumes the refund queue entries" file="/root/MICA-E.Dapp/tests/auction-safety-fix.test.ts" time="0.001"/>
<testcase classname="Auction end update (P1) TDD" name="exposes auction_update_end entrypoint and accounts" file="/root/MICA-E.Dapp/tests/auction-update-end.test.ts" time="0.001"/>
<testcase classname="Auction end update (P1) TDD" name="implements logic to set or extend end time and emits event" file="/root/MICA-E.Dapp/tests/auction-update-end.test.ts" time="0"/>
<testcase classname="Auto-bid (P1) TDD" name="defines AutoBidEntry and AutoBidStore with max_entries and space_for" file="/root/MICA-E.Dapp/tests/auto-bid.test.ts" time="0"/>
<testcase classname="Auto-bid (P1) TDD" name="exposes init_auto_bid_store instruction and accounts" file="/root/MICA-E.Dapp/tests/auto-bid.test.ts" time="0"/>
<testcase classname="Auto-bid (P1) TDD" name="BidPlace includes auto_bid_store account and bid_place uses _max_auto_bid to register/update" file="/root/MICA-E.Dapp/tests/auto-bid.test.ts" time="0"/>
<testcase classname="Auto-bid (P1) TDD" name="bid_place computes next_min and loops over auto bidders to outbid up to their max" file="/root/MICA-E.Dapp/tests/auto-bid.test.ts" time="0.001"/>
<testcase classname="Buy-now (P1) TDD" name="exposes buy_now instruction and BuyNow accounts" file="/root/MICA-E.Dapp/tests/buy-now.test.ts" time="0"/>
<testcase classname="Buy-now (P1) TDD" name="buy_now implementation binds buyer, pays T0, and locks slot" file="/root/MICA-E.Dapp/tests/buy-now.test.ts" time="0"/>
<testcase classname="Close/Cancel slot by creator/admin (P2) TDD" name="lib.rs exposes close_slot (SPL) and close_slot_sol (SOL) entrypoints" file="/root/MICA-E.Dapp/tests/close-slot.test.ts" time="0.001"/>
<testcase classname="Close/Cancel slot by creator/admin (P2) TDD" name="CloseSlot accounts include authority, platform, mint, slot, escrow + buyer refund accounts" file="/root/MICA-E.Dapp/tests/close-slot.test.ts" time="0.001"/>
<testcase classname="Close/Cancel slot by creator/admin (P2) TDD" name="CloseSlotSol accounts include authority, platform, slot, escrow and buyer SystemAccount" file="/root/MICA-E.Dapp/tests/close-slot.test.ts" time="0"/>
<testcase classname="Close/Cancel slot by creator/admin (P2) TDD" name="escrow.rs implements close_slot using transfer_checked and sets state to Closed" file="/root/MICA-E.Dapp/tests/close-slot.test.ts" time="0.001"/>
<testcase classname="Close/Cancel slot by creator/admin (P2) TDD" name="escrow.rs implements close_slot_sol using lamports transfer and sets state to Closed" file="/root/MICA-E.Dapp/tests/close-slot.test.ts" time="0"/>
<testcase classname="CommitStore capacity TDD (P0)" name="CommitStore has persisted max_entries and space accounts for entries" file="/root/MICA-E.Dapp/tests/commit-store-capacity.test.ts" time="0"/>
<testcase classname="CommitStore capacity TDD (P0)" name="init_commit_store sets max_entries and reserves Vec capacity" file="/root/MICA-E.Dapp/tests/commit-store-capacity.test.ts" time="0.001"/>
<testcase classname="CommitStore capacity TDD (P0)" name="bid_commit enforces store.count &#x3C; store.max_entries (not Vec capacity)" file="/root/MICA-E.Dapp/tests/commit-store-capacity.test.ts" time="0"/>
<testcase classname="Duplicate stable_settle logic (P2) TDD" name="lib.rs stable_settle delegates to escrow::stable_settle (no duplicated logic)" file="/root/MICA-E.Dapp/tests/duplicate-stable-settle.test.ts" time="0"/>
<testcase classname="Duplicate stable_settle logic (P2) TDD" name="escrow.rs owns the settlement logic and uses transfer_checked" file="/root/MICA-E.Dapp/tests/duplicate-stable-settle.test.ts" time="0.001"/>
<testcase classname="Fee override (P1) TDD" name="defines effective_fee_bps helper" file="/root/MICA-E.Dapp/tests/fee-override.test.ts" time="0.001"/>
<testcase classname="Fee override (P1) TDD" name="stable_settle uses effective_fee_bps for total_fee and T1 fee" file="/root/MICA-E.Dapp/tests/fee-override.test.ts" time="0"/>
<testcase classname="Fee override (P1) TDD" name="auction_end and buy_now use effective_fee_bps for T0 fees; sealed-bid uses it for T0/T1" file="/root/MICA-E.Dapp/tests/fee-override.test.ts" time="0"/>
<testcase classname="Separate fee vault vs dispute vault (P1) TDD" name="Platform struct has fee_vault and InitPlatform creates fee_vault via fee_authority PDA" file="/root/MICA-E.Dapp/tests/fee-vault-separation.test.ts" time="0"/>
<testcase classname="Separate fee vault vs dispute vault (P1) TDD" name="AuctionEnd/BuyNow/Sealed flows route fees to fee_vault" file="/root/MICA-E.Dapp/tests/fee-vault-separation.test.ts" time="0.001"/>
<testcase classname="Separate fee vault vs dispute vault (P1) TDD" name="Retained T1 amounts go to dispute_vault, not fee_vault" file="/root/MICA-E.Dapp/tests/fee-vault-separation.test.ts" time="0.001"/>
<testcase classname="Multi-capacity slots (P1) TDD" name="TimeSlot has capacity_total and capacity_sold; LEN updated" file="/root/MICA-E.Dapp/tests/multi-capacity.test.ts" time="0.001"/>
<testcase classname="Multi-capacity slots (P1) TDD" name="create_time_slot maps params.capacity to capacity_total and guards auctions" file="/root/MICA-E.Dapp/tests/multi-capacity.test.ts" time="0"/>
<testcase classname="Multi-capacity slots (P1) TDD" name="stable_reserve enforces remaining capacity and check-in increments sold" file="/root/MICA-E.Dapp/tests/multi-capacity.test.ts" time="0"/>
<testcase classname="Multi-capacity slots (P1) TDD" name="auction paths guard capacity_total == 1" file="/root/MICA-E.Dapp/tests/multi-capacity.test.ts" time="0.001"/>
<testcase classname="NFT minting integration (P1) TDD" name="extends StableCheckin with NFT accounts and uses mint_to" file="/root/MICA-E.Dapp/tests/nft-minting.test.ts" time="0"/>
<testcase classname="NFT minting integration (P1) TDD" name="extends AuctionEnd/BuyNow/SealedAuctionEnd with NFT accounts and uses mint_to" file="/root/MICA-E.Dapp/tests/nft-minting.test.ts" time="0.001"/>
<testcase classname="Program ID consistency (P0)" name="Anchor.toml, Rust declare_id!, IDL, and SDK PROGRAM_ID should match" file="/root/MICA-E.Dapp/tests/program-id-consistency.test.ts" time="0.006"/>
<testcase classname="Refund queue for auctions (P1) TDD" name="defines RefundEntry and RefundQueue with space_for and InitRefundQueue accounts" file="/root/MICA-E.Dapp/tests/refund-queue.test.ts" time="0.114"/>
<testcase classname="Refund queue for auctions (P1) TDD" name="wires refund_queue into BidPlace, BidOutbidRefund, and AuctionEnd accounts" file="/root/MICA-E.Dapp/tests/refund-queue.test.ts" time="0"/>
<testcase classname="Refund queue for auctions (P1) TDD" name="has init_refund_queue handler and enqueues/consumes refunds in market.rs" file="/root/MICA-E.Dapp/tests/refund-queue.test.ts" time="0"/>
<testcase classname="Refund queue for auctions (P1) TDD" name="removes direct pending_refund fields usage in market.rs init_bid_book and guards" file="/root/MICA-E.Dapp/tests/refund-queue.test.ts" time="0"/>
<testcase classname="SDK build distribution (P1) TDD" name="pnpm build produces dist outputs and dist/idl/timemarket.json" file="/root/MICA-E.Dapp/tests/sdk-build-distribution.test.ts" time="2.235"/>
<testcase classname="SDK higher-level client helpers (P2) TDD" name="SDK exports pdas helpers from index.ts" file="/root/MICA-E.Dapp/tests/sdk-client-helpers.test.ts" time="0.001"/>
<testcase classname="SDK higher-level client helpers (P2) TDD" name="PDA helpers include expected seed derivations" file="/root/MICA-E.Dapp/tests/sdk-client-helpers.test.ts" time="0"/>
<testcase classname="SDK IDL import (P0) TDD" name="idl/index.ts imports ./timemarket.json and exports it" file="/root/MICA-E.Dapp/tests/sdk-idl-import.test.ts" time="0.001"/>
<testcase classname="SDK IDL import (P0) TDD" name="src/idl/index.ts imports ./timemarket.json and exports it" file="/root/MICA-E.Dapp/tests/sdk-idl-import.test.ts" time="0"/>
<testcase classname="SDK IDL import (P0) TDD" name="IDL JSON exists in both idl/ and src/idl/ (placeholder acceptable)" file="/root/MICA-E.Dapp/tests/sdk-idl-import.test.ts" time="0.001"/>
<testcase classname="SDK IDL import (P0) TDD" name="SDK exports PROGRAM_ID constant in src/index.ts with correct address" file="/root/MICA-E.Dapp/tests/sdk-idl-import.test.ts" time="0"/>
<testcase classname="Sealed-bid End/Settle TDD" name="lib.rs exposes sealed_auction_end and sealed_auction_settle entrypoints" file="/root/MICA-E.Dapp/tests/sealed-bid-end-settle.test.ts" time="0"/>
<testcase classname="Sealed-bid End/Settle TDD" name="market.rs implements sealed_auction_end and sealed_auction_settle and allows checkin for SealedBid" file="/root/MICA-E.Dapp/tests/sealed-bid-end-settle.test.ts" time="0"/>
<testcase classname="Security sanity (P2) TDD" name="guards critical actions when slot.frozen == true" file="/root/MICA-E.Dapp/tests/security-sanity.test.ts" time="0.001"/>
<testcase classname="Security sanity (P2) TDD" name="CloseSlot account constrains buyer_token mint and logic checks owner + uses mint.decimals" file="/root/MICA-E.Dapp/tests/security-sanity.test.ts" time="0.001"/>
<testcase classname="SOL Stable flow (P2 optional) TDD" name="lib.rs exposes SOL stable entrypoints" file="/root/MICA-E.Dapp/tests/sol-stable-flow.test.ts" time="0.001"/>
<testcase classname="SOL Stable flow (P2 optional) TDD" name="escrow.rs implements SOL stable reserve/cancel/settle using lamports logic" file="/root/MICA-E.Dapp/tests/sol-stable-flow.test.ts" time="0"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="App wired with wallet providers and buttons" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0.001"><failure>ENOENT: no such file or directory, open &#x27;/root/MICA-E.Dapp/apps/web/src/app/providers.tsx&#x27;
Error: ENOENT: no such file or directory, open &#x27;/root/MICA-E.Dapp/apps/web/src/app/providers.tsx&#x27;
    at Object.openSync (node:fs:596:3)
    at readFileSync (node:fs:464:35)
    at read (tests/web-core-screens.test.ts:5:47)
    at Context.&#x3C;anonymous&#x3E; (tests/web-core-screens.test.ts:13:23)
    at processImmediate (node:internal/timers:476:21)</failure></testcase>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Creators listing page exists and renders CreatorCard" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Creator profile page shows available slots calendar and Reserve CTA" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0.001"><failure>expected &#x27;&#x27; to match /Available slots/
AssertionError: expected &#x27;&#x27; to match /Available slots/
    at Context.&#x3C;anonymous&#x3E; (tests/web-core-screens.test.ts:29:20)
    at processImmediate (node:internal/timers:476:21)</failure></testcase>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Slot page supports Auction (BidRoom) and Fixed price Reserve" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0.001"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Creator onboard page initializes profile via Anchor (mocked now)" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Creator dashboard provides create slot form and revenue panel" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0.001"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Ticket page supports check-in toggle" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0"/>
<testcase classname="Web Frontend Core Screens (P1) TDD" name="Support complaints page exists" file="/root/MICA-E.Dapp/tests/web-core-screens.test.ts" time="0"/>
</testsuite>
