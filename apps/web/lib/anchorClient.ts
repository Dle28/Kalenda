// apps/web/lib/anchorClient.ts
'use client';

import { AnchorProvider, Program, Idl, setProvider } from '@coral-xyz/anchor';
import type { WalletContextState } from '@solana/wallet-adapter-react';
import { Connection, PublicKey } from '@solana/web3.js';

// ⚠️ IDL is generated by Anchor build and copied into apps/web/idl
// See: target/idl/timemarket.json -> apps/web/idl/timemarket.json
import idl from '@/idl/timemarket.json';

// Prefer program id from IDL metadata; fallback to known devnet address
const PROGRAM_ID = new PublicKey(
  // @ts-ignore: IDL may carry metadata.address depending on Anchor version
  (idl as any)?.metadata?.address ?? 'Gz7jdgqsn3R8mBrthEx5thAFYdM369kHN7wMTY3PKhty'
);

// Map wallet-adapter context to Anchor-compatible wallet interface
function toAnchorWallet(wallet: WalletContextState) {
  const adapter = wallet?.adapter as any;
  if (!adapter?.publicKey || !adapter?.signTransaction || !adapter?.signAllTransactions) {
    throw new Error('Wallet chưa kết nối hoặc không hỗ trợ ký giao dịch.');
  }
  return {
    publicKey: adapter.publicKey,
    signTransaction: adapter.signTransaction.bind(adapter),
    signAllTransactions: adapter.signAllTransactions.bind(adapter),
  };
}

export function getProvider(connection: Connection, wallet: WalletContextState) {
  const anchorWallet = toAnchorWallet(wallet);
  const provider = new AnchorProvider(connection, anchorWallet as any, {
    commitment: 'confirmed',
    preflightCommitment: 'confirmed',
  });
  setProvider(provider);
  return provider;
}

export function getProgram(connection: Connection, wallet: WalletContextState) {
  const provider = getProvider(connection, wallet);
  return new Program(idl as Idl, PROGRAM_ID, provider);
}

