// apps/web/lib/anchorClient.ts
'use client';

import { AnchorProvider, Program, Idl, setProvider } from '@coral-xyz/anchor';
import type { WalletContextState } from '@solana/wallet-adapter-react';
import { Connection, PublicKey } from '@solana/web3.js';

// IDL is generated by Anchor build and copied into apps/web/idl
// See: target/idl/timemarket.json -> apps/web/idl/timemarket.json
import idl from '@/idl/timemarket.json';

// Prefer program id from IDL metadata; fallback to known devnet address
const PROGRAM_ID = new PublicKey(
  // @ts-ignore: IDL may carry metadata.address depending on Anchor version
  (idl as any)?.metadata?.address ?? 'Gz7jdgqsn3R8mBrthEx5thAFYdM369kHN7wMTY3PKhty'
);

// Map wallet-adapter context to Anchor-compatible wallet interface
function toAnchorWallet(wallet: WalletContextState) {
  const { publicKey, signTransaction, signAllTransactions } = wallet as any;
  if (!publicKey || !signTransaction || !signAllTransactions) {
    throw new Error('Wallet not connected or does not support signing transactions.');
  }
  return {
    publicKey,
    signTransaction: signTransaction.bind(wallet),
    signAllTransactions: signAllTransactions.bind(wallet),
  } as any;
}

export function getProvider(connection: Connection, wallet: WalletContextState) {
  const anchorWallet = toAnchorWallet(wallet);
  const provider = new AnchorProvider(connection, anchorWallet as any, {
    commitment: 'confirmed',
    preflightCommitment: 'confirmed',
  });
  setProvider(provider);
  return provider;
}

export function getProgram(connection: Connection, wallet: WalletContextState) {
  const provider = getProvider(connection, wallet);
  // Anchor 0.31 Program constructor takes (idl, provider[, coder]) and reads address from IDL metadata
  return new Program(idl as Idl, provider as any);
}


